@using Ahghee.Grpc
@using FASTER.core
@using Range = System.Range
@using System.Text
@inject IJSRuntime JSRuntime;


<div style="float:left; padding-left: 10px;">
@*     <input type="checkbox" name="node names" @onchange="@(async (t) => *@
@*                                                         { *@
@*                                                             showNodeLabels = !showNodeLabels; *@
@*                                                             await JSRuntime.InvokeVoidAsync("d3Interop.showNodeLabels", showNodeLabels); *@
@*                                                         })"/> Node Names *@
@*     <input type="checkbox" name="edge names" @onchange="@(async (t) => *@
@*                                                         { *@
@*                                                             showEdgeLabels = !showEdgeLabels; *@
@*                                                             await JSRuntime.InvokeVoidAsync("d3Interop.showEdgeLabels", showEdgeLabels); *@
@*                                                         })"/> Edge Names *@
@*     <input type="checkbox" checked="true" name="nodes" @onchange="@(async (t) => *@
@*                                                                   { *@
@*                                                                       showNodes = !showNodes; *@
@*                                                                       await JSRuntime.InvokeVoidAsync("d3Interop.showNodes", showNodes); *@
@*                                                                   })"/> Nodes *@
@*     <input type="checkbox" checked="true" name="edges" @onchange="@(async (t) => *@
@*                                                                   { *@
@*                                                                       showNodes = !showNodes; *@
@*                                                                       await  JSRuntime.InvokeVoidAsync("d3Interop.showEdges", showNodes); *@
@*                                                                   })"/> Edges *@
@*      *@
@*     <input type="checkbox" name="pause" @onchange="@(async (t) => *@
@*                                                    { *@
@*                                                        pauseLayout = !pauseLayout; *@
@*                                                        await  JSRuntime.InvokeVoidAsync("d3Interop.pauseLayout", pauseLayout); *@
@*                                                    })"/> Pause Layout *@
    
</div>
<div id="@uniqueIdCanvas" style="width: 1200px; height:800px;" ></div>

@code {
    [Parameter]
    public List<Node> Nodes { get; set; }

    bool showNodeLabels = false;
    bool showEdgeLabels = false;
    bool showNodes = true;
    bool showLabels = true;
    bool pauseLayout = false;
    private int lasthash = 0;
    private ElementReference d3Container;
    private string uniqueId = Guid.NewGuid().ToString().Replace("-", "");
    private string uniqueIdCanvas = Guid.NewGuid().ToString().Replace("-", "");
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        
        // tod: like should we render?
        // be great to know if the nodes we have now are different from the nodes we had last time.
        var newHash = Nodes
            .Select(n => n.Id.Iri.GetHashCode())
            .Aggregate(0, (acc, next) => acc ^ next);
        if (newHash != lasthash)
        {
            lasthash = newHash;
            DoIt();
        }
        //this.StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public async Task DoIt()
    {
        // we dont' want to send extra junk down.
        // filter to only attributes that are edges.
        try
        {
            Console.WriteLine("cleaning it");
            var lessData = Nodes.Select(n =>
            {
                var edges = n.Attributes
                    
                    .Where(a => a.Value.Data.Nodeid != null)
                    .GroupBy(kv => 
                        kv.Key.Data?.Nodeid?.Iri != null ? kv.Key.Data?.Nodeid?.Iri : kv.Key.Data?.Str,
                    kv => 
                        kv.Value.Data.Nodeid.Iri);
        // all we need is iri, label, iri
                return (n.Id.Iri,edges);
            })
                .GroupBy(x=> x.Item1,x => x.edges)
                .Select(x =>
                {
                    return new node
                    {
                        source = x.Key,
                        edges = x.SelectMany(y =>
                            y.Select(z =>
                                new edge
                                {
                                    type = z.Key,
                                    target = z.ToList()
                                })
                            ).ToList()
                    };
                })
                .ToList();

            Console.WriteLine("cleaning it - finished, rendering");
            Console.WriteLine(lessData);
            await JSRuntime.InvokeVoidAsync( "threeInterop.example", uniqueIdCanvas, lessData);
            //await JSRuntime.InvokeVoidAsync( "d3Interop.renderGraph", uniqueId, lessData);
            Console.WriteLine("RenderGraph - finished");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Console.WriteLine(e.StackTrace);
            throw;
        }
    }

    public class node
    {
        public string source { get; set; }
        public List<edge> edges { get; set; } = new List<edge>();
    }

    public class edge
    {
        public string type { get; set; }
        public List<string> target { get; set; } = new List<string>();
    }
}