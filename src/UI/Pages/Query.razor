@page "/query"

@using System.IO
@using Ekati.Grpc
@using Microsoft.Extensions.Logging
@using Antlr4
@using Antlr4.Runtime
@using cli.antlr
@using cli_grammer
@using Grpc.Core.Utils
@using Microsoft.AspNetCore.Components.Rendering
@inject Ekati.Grpc.WatDbService.WatDbServiceClient wat
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject ILogger<Query> Logger


<div>
    <h3 style="display: inline; padding-right: 5%;">Query</h3>
    <button @onclick="@((o) => { this.Run(); })">Run</button>
    <button @onclick="@((o) => { this.Clear(); })">Clear</button>
</div>
<div style="display: table; clear: both;">
    <div style="width: 40%; height: 500px; float: left;">
        <div id="monaco_container" style="width: 100%; height: 100%;"></div>

    </div>
    <div style="float: right; width: 60%; height: 100%; overflow: hidden; background-color: black; ">
        <Graph Nodes="@Nodes"></Graph>
    </div>
    <div style="clear: left; width: 40%;">
       <ul style="max-height: 30%; overflow-y: scroll; overflow-x: hidden;">
           @foreach (var pi in ProgressItems)
           {
               var myPI = pi;
               <li >
                   <button @onclick="@(() => { ProgressItems.Remove(myPI);})">X</button>
                   (@myPI.Count / @myPI.OfTotal) - @myPI.Message
               </li>
           }
       </ul>
       <div style="clear: left; background-color: #3b3a39; height: 20%">
              Stuff here?
       </div>  
    </div>
</div>
<div style="padding: 5px;">
    
        @if (Nodes.Any())
        {
            var headers = (from node in Nodes.Skip(skip).Take(take)
                from attr in node.Attributes
                let keyD = attr.Key.Data.ToDisplayString()
                select (keyD)).OrderBy(x=> x).Distinct().ToList();
            
            <table>
                <thead>
                <tr>
                    <th>id</th>
                    @foreach (var h in headers)
                    {
                        <th>@h</th>
                    }
                </tr>
                </thead>
                <tbody>
                @{
                    foreach (var n in Nodes.Skip(skip).Take(take))
                    {
                        <tr>
                            <td>@n.Id.Iri</td>
                            @foreach (var h in headers)
                            {
                                var vals = n.Attributes.Where(a => a.Key.Data.ToDisplayString() == h).ToList();
                                if (!vals.Any())
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td>

                                        @if (vals.Count == 1)
                                        {
                                            <span>@vals[0].Value.Data.ToDisplayString()</span>
                                        }
                                        else
                                        {
                                            <ul>
                                                @foreach (var a in vals.Take(3))
                                                {
                                                    //var key = a.Key.Data.ToDisplayString();
                                                    var val = a.Value.Data.ToDisplayString().Replace("\\u", "&#");
                                                    <li>@val</li>
                                                }
                                                @if (vals.Count > 3)
                                                {
                                                    <li>...</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                }
                            }
                        </tr>
                    }
                }
                </tbody>
            </table>     
        }
</div>  

@code {

    bool isInitializing;
    public bool IsInitialized;
    public int IsLoading;
    public List<Node> Nodes { get; set; }

    int skip = 0;
    int take = 10;
    int took = 0;
    int Limit = 1000;
    List<ProgressItem> ProgressItems { get; set; } = new List<ProgressItem>();
    internal class ProgressItem
    {
        public string Message { get; set; }
        public long Count { get; set; }
        public long OfTotal { get; set; }
        public bool InProgress { get; set; }
    }

    private void OnDismiss(ProgressItem pi)
    {
        ProgressItems.Remove(pi);
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        Nodes = new List<Node>();
    }

    static UnbufferedTokenStream makeStream(string text)
    {
        var sr = new StringReader(text);
        var ins = new AntlrInputStream(sr);
        var lex = new AHGHEELexer(ins);
        return new UnbufferedTokenStream(lex);
    }

    private async Task Clear()
    {
        took = 0;
        this.Nodes.Clear();
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsInitialized || isInitializing)
            return;

        isInitializing = true;

        var text = @"




// c style comments - highlight and ctrl+/ or command+/
// load graphml ""https://raw.githubusercontent.com/Astn/ekati/master/src/core/tinkerpop-modern.xml""

// you can find lots of 'nt' data to download from wikidata https://www.wikidata.org/wiki/Special:EntityData
// load nt ""https://www.wikidata.org/wiki/Special:EntityData/Q23.nt""

// multi-line comments also supported

/* 
get ""*"" 
	|> limit 500
    |> follow * 1
       |> limit 500
       |> fields (( ^:^ , *:^ ) - ( ""age"":* , ""bio"":*)) + ^""asdfasfda"":string
       |> follow * 1
       |> limit 500
*/

// put some data in
// put ""your/wonderful/id"" 
//     ""key"":""value"",
//     ""key2"":""value2"",
//     ""linkname"":^""someid"",
//     ""anotherlink"":^""anotherid"";

//     ""someid""
//         ""likes"":^""your/wonderful/id"",
//         ""doesnt/like"":^""anotherid"";

//     ""anotherid""
//         ""name"":""whatever you like"",
//         ""follows"":^""1"";  

// get it back out
// get ""your/wonderful/id"" 
// 	|> follow * 3

";

        try
        {
            text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectReference.Create(this), text);
        }
        catch (Exception e)
        {
            Logger.LogError("Something with monaco", e);
            text = null;
        }

        this.Source = await JS_GetSourceAsync();
        StateHasChanged();

        IsInitialized = true;
        StateHasChanged();
    }

    public string Source { get; set; }

    [JSInvokable]
    public async Task<string> JS_OnContentChanged()
    {
        this.Source = await JS_GetSourceAsync();

        return "occ";
    }

    public async Task<string> JS_GetSourceAsync()
    {
        try
        {
            var source = await JsRuntime.InvokeAsync<string>("GetMonacoEditorContent", new object[] {});
    //DebugText = $"{counterSource++} Source:{source}";
            return source;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "2something with monaco");
            return string.Empty;
        }
    }

    private void AttachLimitStep(Ekati.Grpc.Query query)
    {
        var limitStep = new Ekati.Grpc.Step
        {
            Limit = new LimitFilter
            {
                Value = Limit
            }
        };
        
        if (query.Step != null)
        {
            var lastStep = query.Step;
            while (lastStep.Next != null)
            {
                lastStep = lastStep.Next;
            }

            // we only attach if the user didn't put their own limit step on the query.
            if (lastStep.OperatorCase != Step.OperatorOneofCase.Limit)
            {
                lastStep.Next = limitStep;
            }
        }
        else
        {
            query.Step = limitStep;
        }
        
    }
    
    private async Task Run()
    {
        await JS_OnContentChanged();
        
        var parser = new AHGHEEParser(makeStream(Source));
        parser.BuildParseTree = true;
        parser.AddParseListener(listener: new Listener(async (nodes) =>
        {
            try
            {

            
                var pi = new ProgressItem
                {
                    Message = "Putting Nodes",
                    Count = 0,
                    InProgress = true
                };
                ProgressItems.Add(pi);
                this.StateHasChanged();
                foreach (var node in nodes)
                {
                    pi.Count++;
                    await wat.PutAsync(node);
                    pi.Count--;
                }
                this.StateHasChanged();     
                pi.InProgress = false;
                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ex {ex} stack: {ex.StackTrace}");
            }
        }, async (nids, step) =>
        {
            var q = new Ekati.Grpc.Query();
            q.Iris.AddRange(nids.Select(x => x.Iri));
            q.Step = step;
            AttachLimitStep(q);

            var pi = new ProgressItem
            {
                Message = "Getting Nodes",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            
            this.StateHasChanged();
            var stream = wat.Get(q);
            var head = await stream.ResponseHeadersAsync;
            
            this.StateHasChanged();
            await stream.ResponseStream.ForEachAsync(async node =>
            {
                if (this.Nodes.Find(n => n.Id.Equals(node.Id)) == null)
                {
                    this.Nodes.Add(node);
                }
                pi.Count++;
            });
            pi.InProgress = false;
            this.StateHasChanged();
        }, () => { },
            async (loadType, path) =>
            {
                var pi = new ProgressItem
                {
                    Message = "Loading Nodes: "+ path,
                    Count = 1,
                    InProgress = true
                };
                ProgressItems.Add(pi);
                this.StateHasChanged();
                var loadProgress = wat.Load(new LoadFile
                {
                    Type = loadType,
                    Path = path.Trim('\"')
                });
                await loadProgress.ResponseStream.ForEachAsync(async progress =>
                {
                    pi.Count = progress.Progress;
                    pi.OfTotal = progress.Length;
                    this.StateHasChanged();
                });
                this.StateHasChanged();
            }));
        parser.AddErrorListener(new ErrorListener());
        AHGHEEParser.CommandContext cc = null;

        for (;; cc = parser.command())
        {
            if (cc?.exception != null
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.InputMismatchException)
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.NoViableAltException)
                )
            {
                var pi = new ProgressItem
                {
                    Message = $"{cc.exception.Message} - found {cc.exception.OffendingToken.Text} at Line {cc.exception.OffendingToken.Line} offset at {cc.exception.OffendingToken.StartIndex}",
                    Count = 0,
                    InProgress = true
                };
                ProgressItems.Add(pi);
            }

            if (parser.CurrentToken.Type == TokenConstants.Eof)
            {
                break;
            }
        }
    }
}