@page "/query"

@using System.IO
@using Ahghee.Grpc
@using Microsoft.Extensions.Logging
@using Antlr4
@using Antlr4.Runtime
@using BlazorFabric
@using cli.antlr
@using cli_grammer
@using Grpc.Core.Utils
@inject Ahghee.Grpc.WatDbService.WatDbServiceClient wat
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject ILogger<Query> Logger

<h3 >Query</h3>
<CommandBar Items=@commands />
<div style="display: table; clear: both;">
    <div id="monaco_container" style="width: 40%; height: 500px; float: left;" ></div>
    <div  style="float: right; width: 60%; overflow: hidden; background-color: black; ">
        <Graph Nodes="@Nodes"></Graph>    
    </div>
    <div>
        @if (IsLoading > 0)
        {
            var label = $"{IsLoading} - Processing";
            <Spinner Size=@SpinnerSize.Small Label="@label" ></Spinner>
        }
    </div>
</div>
<div>
    
        @if (Nodes.Any())
        {
            var headers = (from node in Nodes
                from attr in node.Attributes
                let keyD = attr.Key.Data.ToDisplayString()
                select (keyD)).OrderBy(x=> x).Distinct().ToList();
            
            <table>
                <thead>
                <tr>
                    <th>id</th>
                    @foreach (var h in headers)
                    {
                        <th>@h</th>
                    }
                </tr>
                </thead>
                <tbody>
                @{
                    foreach (var n in Nodes.Skip(skip).Take(take))
                    {
                        <tr>
                            <td>@n.Id.Iri</td>
                            @foreach (var h in headers)
                            {
                                var vals = n.Attributes.Where(a => a.Key.Data.ToDisplayString() == h).ToList();
                                if (!vals.Any())
                                {
                                    <td><i>null</i></td>
                                }
                                else
                                {
                                    <td>

                                        @if (vals.Count == 1)
                                        {
                                            <span>@vals[0].Value.Data.ToDisplayString()</span>
                                        }
                                        else
                                        {
                                            <ul>
                                                @foreach (var a in vals.Take(10))
                                                {
                                                    //var key = a.Key.Data.ToDisplayString();
                                                    var val = a.Value.Data.ToDisplayString().Replace("\\u", "&#");
                                                    <li>@val</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                }
                            }
                        </tr>
                    }
                }
                </tbody>
            </table>     
            
                        
            
        }
</div>  

@code {
    private List<CommandBarItem> commands;
    bool isInitializing;
    public bool IsInitialized;
    public int IsLoading;
    public List<Node> Nodes { get; set; }

    int skip = 0;
    int take = 10;
    int took = 0;  
    
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        commands = new List<CommandBarItem>
        {
            new CommandBarItem() {Text = "Run", IconName = "Play", Key = "1", Command = new RelayCommand((o) => { this.Run(); }, (o)=>true)},
            new CommandBarItem() {Text = "Clear", IconName = "Clear", Key = "2", Command = new RelayCommand((o) => { Clear(); },(o)=>true)},
            new CommandBarItem() {Text = "Up", IconName = "CaretSolidUp", Key = "3", Command = new RelayCommand((o) => { 
                                                                                                                           if(skip>0)
                                                                                                                           skip -= take; },(o)=>true)},
            new CommandBarItem() {Text = "Down", IconName = "CaretSolidDown", Key = "4", Command = new RelayCommand((o) => { 
                                                                                                                               if(skip< Nodes.Count)
                                                                                                                               skip += take; },(o)=>true)}
        };

        Nodes = new List<Node>();
    }

    static UnbufferedTokenStream makeStream(string text)
    {
        var sr = new StringReader(text);
        var ins = new AntlrInputStream(sr);
        var lex = new AHGHEELexer(ins);
        return new UnbufferedTokenStream(lex);
    }

    private async Task Clear()
    {
        took = 0;
        this.Nodes.Clear();
        this.StateHasChanged();
    }

    


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsInitialized || isInitializing)
            return;

        isInitializing = true;

        var text = "get austin |> follow * 1";

        try
        {
            text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectReference.Create(this), text);
        }
        catch (Exception e)
        {
            Logger.LogError("1something with monaco", e);
            text = null;
        }

        this.Source = await JS_GetSourceAsync();
        StateHasChanged();

        IsInitialized = true;
        StateHasChanged();
    }

    public string Source { get; set; }

    [JSInvokable]
    public async Task<string> JS_OnContentChanged()
    {
        this.Source = await JS_GetSourceAsync();

        return "occ";
    }

    public async Task<string> JS_GetSourceAsync()
    {
        try
        {
            var source = await JsRuntime.InvokeAsync<string>("GetMonacoEditorContent", new object[] {});
    //DebugText = $"{counterSource++} Source:{source}";
            return source;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "2something with monaco");
            return string.Empty;
        }
    }
    
    private async Task Run()
    {
        await JS_OnContentChanged();
        
        var parser = new AHGHEEParser(makeStream(Source));
        parser.BuildParseTree = true;
        parser.AddParseListener(listener: new Listener(async (nodes) =>
        {
            Source = "";
            foreach (var node in nodes)
            {
                IsLoading++;
                this.StateHasChanged();
                await wat.PutAsync(node);
                IsLoading--;
                Source += "\nput:" + node.Id.Iri;
                this.StateHasChanged();
            }
        }, async (nids, step) =>
        {
            var q = new Ahghee.Grpc.Query();
            q.Iris.AddRange(nids.Select(x => x.Iri));
            q.Step = step;

            IsLoading++;
            this.StateHasChanged();
            var stream = wat.Get(q);
            var head = await stream.ResponseHeadersAsync;
            Source = "";
            this.StateHasChanged();
            await stream.ResponseStream.ForEachAsync(async node =>
            {
                if (this.Nodes.Find(n => n.Id.Equals(node.Id)) == null)
                {
                    this.Nodes.Add(node);
                }
                else
                {
                    return;
                }

    // todo: show it
                Source += "\n" + node.Id.Iri.ToString();
            });
            IsLoading--;
            this.StateHasChanged();
        }, () => { },
            async (loadType, path) =>
            {
                Console.WriteLine($"Loading: {loadType} @ {path}");
                IsLoading++;
                this.StateHasChanged();
                await wat.LoadAsync(new LoadFile
                {
                    Type = loadType,
                    Path = path.Trim('\"')
                });
                IsLoading--;
                this.StateHasChanged();
                Console.WriteLine($"Finished Loading: {loadType} @ {path}");
            }));
        parser.AddErrorListener(new ErrorListener());
        AHGHEEParser.CommandContext cc = null;

        for (;; cc = parser.command())
        {
            if (cc?.exception != null
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.InputMismatchException)
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.NoViableAltException)
                )
            {
                Console.WriteLine(cc.exception.Message);
                Console.WriteLine(
                    $"found {cc.exception.OffendingToken.Text} at Line {cc.exception.OffendingToken.Line} offset at {cc.exception.OffendingToken.StartIndex}");
            }

            if (parser.CurrentToken.Type == TokenConstants.Eof)
            {
                break;
            }
        }
    }
}