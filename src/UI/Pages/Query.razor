@page "/query"

@using System.IO
@using Ahghee.Grpc
@using Microsoft.Extensions.Logging
@using Antlr4
@using Antlr4.Runtime
@using BlazorFabric
@using cli.antlr
@using cli_grammer
@using Grpc.Core.Utils
@using Microsoft.AspNetCore.Components.Rendering
@inject Ahghee.Grpc.WatDbService.WatDbServiceClient wat
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject ILogger<Query> Logger

<h3 >Query</h3>
<CommandBar Items=@commands />
<div style="display: table; clear: both;">
    <div style="width: 40%; height: 500px; float: left;">
        <div id="monaco_container" style="width: 100%; height: 100%;"></div>
                @foreach (var pi in ProgressItems)
                {
                    var myPI = pi;
                    <div >
                        <button @onclick="@(() => { ProgressItems.Remove(myPI);})">X</button>
                        @myPI.Count - @myPI.Message
                    </div>
                }
    </div>
    <div style="float: right; width: 60%; overflow: scroll; background-color: black; ">
        <Graph Nodes="@Nodes"></Graph>
    </div>
</div>
<div>
    
@*         @if (Nodes.Any()) *@
@*         { *@
@*             var headers = (from node in Nodes *@
@*                 from attr in node.Attributes *@
@*                 let keyD = attr.Key.Data.ToDisplayString() *@
@*                 select (keyD)).OrderBy(x=> x).Distinct().ToList(); *@
@*              *@
@*             <table> *@
@*                 <thead> *@
@*                 <tr> *@
@*                     <th>id</th> *@
@*                     @foreach (var h in headers) *@
@*                     { *@
@*                         <th>@h</th> *@
@*                     } *@
@*                 </tr> *@
@*                 </thead> *@
@*                 <tbody> *@
@*                 @{ *@
@*                     foreach (var n in Nodes.Skip(skip).Take(take)) *@
@*                     { *@
@*                         <tr> *@
@*                             <td>@n.Id.Iri</td> *@
@*                             @foreach (var h in headers) *@
@*                             { *@
@*                                 var vals = n.Attributes.Where(a => a.Key.Data.ToDisplayString() == h).ToList(); *@
@*                                 if (!vals.Any()) *@
@*                                 { *@
@*                                     <td><i>null</i></td> *@
@*                                 } *@
@*                                 else *@
@*                                 { *@
@*                                     <td> *@
@* *@
@*                                         @if (vals.Count == 1) *@
@*                                         { *@
@*                                             <span>@vals[0].Value.Data.ToDisplayString()</span> *@
@*                                         } *@
@*                                         else *@
@*                                         { *@
@*                                             <ul> *@
@*                                                 @foreach (var a in vals.Take(10)) *@
@*                                                 { *@
@*                                                     //var key = a.Key.Data.ToDisplayString(); *@
@*                                                     var val = a.Value.Data.ToDisplayString().Replace("\\u", "&#"); *@
@*                                                     <li>@val</li> *@
@*                                                 } *@
@*                                             </ul> *@
@*                                         } *@
@*                                     </td> *@
@*                                 } *@
@*                             } *@
@*                         </tr> *@
@*                     } *@
@*                 } *@
@*                 </tbody> *@
@*             </table>      *@
@*              *@
@*                          *@
@*              *@
@*         } *@
</div>  

@code {
    private List<CommandBarItem> commands;
    bool isInitializing;
    public bool IsInitialized;
    public int IsLoading;
    public List<Node> Nodes { get; set; }

    int skip = 0;
    int take = 10;
    int took = 0;
    int Limit = 1000;
    List<ProgressItem> ProgressItems { get; set; } = new List<ProgressItem>();
    internal class ProgressItem
    {
        public string Message { get; set; }
        public int Count { get; set; }
        public bool InProgress { get; set; }
    }

    private void OnDismiss(ProgressItem pi)
    {
        ProgressItems.Remove(pi);
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        
        commands = new List<CommandBarItem>
        {
            new CommandBarItem() {Text = "Run", IconName = "Play", Key = "1", Command = new RelayCommand((o) => { this.Run(); }, (o)=>true)},
            new CommandBarItem() {Text = "Clear", IconName = "Clear", Key = "2", Command = new RelayCommand((o) => { Clear(); },(o)=>true)},
            new CommandBarItem() {Text = "Up", IconName = "CaretSolidUp", Key = "3", Command = new RelayCommand((o) => { 
                                                                                                                           if(skip>0)
                                                                                                                           skip -= take; },(o)=>true)},
            new CommandBarItem() {Text = "Down", IconName = "CaretSolidDown", Key = "4", Command = new RelayCommand((o) => { 
                                                                                                                               if(skip< Nodes.Count)
                                                                                                                               skip += take; },(o)=>true)}
        };

        Nodes = new List<Node>();
    }

    static UnbufferedTokenStream makeStream(string text)
    {
        var sr = new StringReader(text);
        var ins = new AntlrInputStream(sr);
        var lex = new AHGHEELexer(ins);
        return new UnbufferedTokenStream(lex);
    }

    private async Task Clear()
    {
        took = 0;
        this.Nodes.Clear();
        this.StateHasChanged();
    }

    


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsInitialized || isInitializing)
            return;

        isInitializing = true;

        var text = "get austin |> follow * 1";

        try
        {
            text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectReference.Create(this), text);
        }
        catch (Exception e)
        {
            Logger.LogError("1something with monaco", e);
            text = null;
        }

        this.Source = await JS_GetSourceAsync();
        StateHasChanged();

        IsInitialized = true;
        StateHasChanged();
    }

    public string Source { get; set; }

    [JSInvokable]
    public async Task<string> JS_OnContentChanged()
    {
        this.Source = await JS_GetSourceAsync();

        return "occ";
    }

    public async Task<string> JS_GetSourceAsync()
    {
        try
        {
            var source = await JsRuntime.InvokeAsync<string>("GetMonacoEditorContent", new object[] {});
    //DebugText = $"{counterSource++} Source:{source}";
            return source;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "2something with monaco");
            return string.Empty;
        }
    }

    private void AttachLimitStep(Ahghee.Grpc.Query query)
    {
        var limitStep = new Ahghee.Grpc.Step
        {
            Limit = new LimitFilter
            {
                Value = Limit
            }
        };
        
        if (query.Step != null)
        {
            var lastStep = query.Step;
            while (lastStep.Next != null)
            {
                lastStep = lastStep.Next;
            }
            lastStep.Next = limitStep;
        }
        else
        {
            query.Step = limitStep;
        }
        
    }
    
    private async Task Run()
    {
        await JS_OnContentChanged();
        
        var parser = new AHGHEEParser(makeStream(Source));
        parser.BuildParseTree = true;
        parser.AddParseListener(listener: new Listener(async (nodes) =>
        {
            var pi = new ProgressItem
            {
                Message = "Putting Nodes",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            foreach (var node in nodes)
            {
                pi.Count++;
                await wat.PutAsync(node);
                pi.Count--;
            }
            this.StateHasChanged();
            pi.InProgress = false;
            this.StateHasChanged();
        }, async (nids, step) =>
        {
            var q = new Ahghee.Grpc.Query();
            q.Iris.AddRange(nids.Select(x => x.Iri));
            
             AttachLimitStep(q);

            
            var pi = new ProgressItem
            {
                Message = "Getting Nodes",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            
            this.StateHasChanged();
            var stream = wat.Get(q);
            var head = await stream.ResponseHeadersAsync;
            
            this.StateHasChanged();
            await stream.ResponseStream.ForEachAsync(async node =>
            {
                if (this.Nodes.Find(n => n.Id.Equals(node.Id)) == null)
                {
                    this.Nodes.Add(node);
                }
                pi.Count++;
            });
            pi.InProgress = false;
            this.StateHasChanged();
        }, () => { },
            async (loadType, path) =>
            {
                var pi = new ProgressItem
                {
                    Message = "Loading Nodes: "+ path,
                    Count = 1,
                    InProgress = true
                };
                ProgressItems.Add(pi);
                this.StateHasChanged();
                await wat.LoadAsync(new LoadFile
                {
                    Type = loadType,
                    Path = path.Trim('\"')
                });
                pi.Count--;
                this.StateHasChanged();
            }));
        parser.AddErrorListener(new ErrorListener());
        AHGHEEParser.CommandContext cc = null;

        for (;; cc = parser.command())
        {
            if (cc?.exception != null
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.InputMismatchException)
    //&& cc.exception.GetType() != typeof(Antlr4.Runtime.NoViableAltException)
                )
            {
                var pi = new ProgressItem
                {
                    Message = $"{cc.exception.Message} - found {cc.exception.OffendingToken.Text} at Line {cc.exception.OffendingToken.Line} offset at {cc.exception.OffendingToken.StartIndex}",
                    Count = 0,
                    InProgress = true
                };
                ProgressItems.Add(pi);
            }

            if (parser.CurrentToken.Type == TokenConstants.Eof)
            {
                break;
            }
        }
    }
}