syntax = "proto3";

package ahghee.grpc;

// Pointer needs fixed fields, so we can update them
// later without affecting the position of other messages
message Pointer {
    fixed32 partition_key = 1;
    fixed32 filename = 2;
    fixed64 offset = 3;
    fixed64 length = 4;
}

message TypeBytes{
    string type = 1;
    bytes bytes = 2;
}

message NodeID {
    string graph = 1;
    string nodeid = 2;
    Pointer node_pointer = 3;
}

message GlobalNodeID {
    string domain = 1;
    string database = 2;
    NodeID nodeid = 3;
}

message Data {
    oneof block {
        NodeID node_id = 1;
        GlobalNodeID global_node_id = 2;
        TypeBytes type_bytes = 3;
        Pointer bytes_pointer = 4;
    }
}

message AddressBlock {
    oneof address {
        NodeID node_id = 1;
        GlobalNodeID global_node_id = 2;
    }
}

message Value {
    Data meta_data = 1;
    Data data = 2;
}
message Key {
    string name =1;
    uint64 time_stamp = 2;
    NodeID edge_attributes =3;
}

message Node_Fragment { // this is a Node_Fragment, meaning multiple fragments per node. and Node is a logical collection of fragments with the same id.
   AddressBlock id = 1;
    // we need to test with the fragments inline here, vs external
    // repeated Pointer fragments = 2;
   repeated Key keys = 3; // keys should be sorted
   repeated Value values = 4; // values ordinal must match keys ordinal
}

// A
// people/austin
// frag = [B,,]
// name = austin
// friend = &B
// location = 37
// age = 37

// B
// frag = [,] // also going to log that I want to update A with [B], this needs to happen in background.
// people/austin
// age = 38

// C
// frag = [A,B,] // also going to log that I want to update B with [C], A with [C] this needs to happen in background.
// people/austin
// location = Denver

// D
// people/austin
// location = Denver

// E
// people/austin
// location = Denver

// F
// people/austin
// location = Denver

message Pointers {
    repeated Pointer pointers = 1; 
}